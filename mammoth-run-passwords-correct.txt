// a sample of the 21 correct implementations (all yes yes)

let update: (Model, Action) -> Model =
  
fun model, action ->
  case action
  | UpdatePassword(newPassword) => 
      let (_, criteria, _) = model in 
      let newStrength = calculateStrength(newPassword, criteria) in 
      (newPassword, criteria, newStrength)
  | ClearCriteria =>
      let (password, _, _) = model in 
      (password, [], strength_of(0))
  | AddCriterion(newCriterion) =>
      let (password, criteria, _) = model in 
      (password, newCriterion::criteria, calculateStrength(password, newCriterion::criteria))
  | RemoveCriterion(criterionToRemove) =>
      let (password, criteria, _) = model in 
      let newCriteria = List.filter(fun criterion -> criterion != criterionToRemove, criteria) in
      (password, newCriteria, calculateStrength(password, newCriteria))
  end
in

let update: (Model, Action) -> Model =
  fun (password, criteria, strength), action ->
  case action
  | UpdatePassword(new_password) => (new_password, criteria, calculateStrength(new_password, criteria))
  | ClearCriteria => (password, [], strength_of(0))
  | AddCriterion(criterion) => (password, criterion::criteria, calculateStrength(password, criterion::criteria))
  | RemoveCriterion(criterion) => let new_criteria = List.filter(fun c -> c != criterion, criteria) in
                                  (password, new_criteria, calculateStrength(password, new_criteria))
  end
in

let update: (Model, Action) -> Model =
  fun (model, action) ->
  case action
  | UpdatePassword(newPassword) => 
    let (oldPassword, criteria, oldStrength) = model in
    let newStrength = calculateStrength(newPassword, criteria) in
    (newPassword, criteria, newStrength)
  | ClearCriteria => 
    let (password, oldCriteria, oldStrength) = model in
    let newStrength = Weak in
    (password, [], newStrength)
  | AddCriterion(newCriterion) => 
    let (password, oldCriteria, oldStrength) = model in
    let newCriteria = newCriterion::oldCriteria in
    let newStrength = calculateStrength(password, newCriteria) in
    (password, newCriteria, newStrength)
  | RemoveCriterion(criterionToRemove) => 
    let (password, oldCriteria, oldStrength) = model in
    let newCriteria = List.filter(fun criterion -> criterion != criterionToRemove, oldCriteria) in
    let newStrength = calculateStrength(password, newCriteria) in
    (password, newCriteria, newStrength)
  end
in

let update: (Model, Action) -> Model =
  fun (model, action) ->
  let (password, criteria, strength) = model in
  case action
  | UpdatePassword(new_password) => (new_password, criteria, calculateStrength(new_password, criteria))
  | ClearCriteria => (password, [], Weak)
  | AddCriterion(new_criterion) => (password, new_criterion::criteria, calculateStrength(password, new_criterion::criteria))
  | RemoveCriterion(old_criterion) => 
    let new_criteria = List.filter(fun c -> c != old_criterion, criteria) in
    (password, new_criteria, calculateStrength(password, new_criteria))
  end
in

