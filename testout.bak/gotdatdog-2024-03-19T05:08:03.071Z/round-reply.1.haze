fun m, a ->
  case a
    | AddBooking(booking) => let (current_form, bookings, booking_id) = m in
                             let (user, weekday, time_of_day) = booking in
                             let new_booking = ((weekday, time_of_day), user, booking_id + 1) in
                             (current_form, new_booking::bookings, booking_id + 1)
    | CancelBooking(user, booking_id) => let (current_form, bookings, _) = m in
                                         let bookings_filtered = List.filter(fun ((_, u, id)) -> u != user \/ id != booking_id, bookings) in
                                         (current_form, bookings_filtered, booking_id)
    | ClearBookings => let booking_form, _, _ = m in (booking_form, [], 0)
    | ClearRange(range) => let (current_form, bookings, booking_id) = m in
                           let ((start_weekday, start_time_of_day), (end_weekday, end_time_of_day)) = range in
                           let filter = fun (((weekday, time_of_day), _, _)) -> weekdayIndex(weekday) >= weekdayIndex(start_weekday) \/ time_of_day >= start_time_of_day && weekdayIndex(weekday) <= weekdayIndex(end_weekday) \/ time_of_day <= end_time_of_day in
                           let bookings_filtered = List.filter(filter, bookings) in
                           (current_form, bookings_filtered, booking_id)
  end