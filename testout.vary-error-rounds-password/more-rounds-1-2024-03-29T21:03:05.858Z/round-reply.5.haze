fun (model, action) ->
  let (password, criteria, strength) = model in
  case action
    | UpdatePassword(new_password) => (new_password, criteria, evaluate_strength(criteria, new_password))
    | ClearCriteria => (password, [], Weak)
    | AddCriterion(criterion) => (password, criterion :: criteria, evaluate_strength(criterion :: criteria, password))
    | RemoveCriterion(criterion) => (password, List.filter((!=) criterion, criteria), evaluate_strength(List.filter((!=) criterion, criteria), password))
  end
where
evaluate_strength: ([Model.PasswordCriteria], Model.Password) -> Model.PasswordStrength = fun (criteria_list, pass) ->
  case criteria_list
    | [] => Model.Weak
    | _::_ => Model.Moderate
    | _::_::_ => Model.Strong
    | _::_::_::_::_ => Model.Strong
  end