# Update Playlist app model based on an action #

let update: (PlayList, PlayListAction) -> PlayList =
  fun playlist, action ->
  case action
    | PlaySong(id) => (get_songs(playlist), Playing(id))
    | PauseCurrentSong => 
        case get_state(playlist) 
          | Playing(id) => (get_songs(playlist), PausedOn(id))
          | _ => playlist
        end
    | RemoveSong(id) => 
        let new_songs = List.filter_map(fun song_id -> if song_id == id then None else Some(song_id), get_songs(playlist)) in
        (new_songs, get_state(playlist))
    | AddSong(id) => 
        let new_songs = id :: get_songs(playlist) in
        (new_songs, get_state(playlist))
  end
in