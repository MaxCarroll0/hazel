fun (model, action) ->
  let m = initialModel in
  case action
    | NoOp => m
    | AddPasswordChar char =>
      let updatedPassword = string_concat(m.password, [char]) in
      let updatedStrength = calculateStrength(updatedPassword, m.criteria) in
      { m with password = updatedPassword, strength = updatedStrength }
    | RemovePasswordChar =>
      let updatedPassword = if m.password == "" then "" else string_sub(m.password, 0, String.length(m.password) - 1) in
      let updatedStrength = calculateStrength(updatedPassword, m.criteria) in
      { m with password = updatedPassword, strength = updatedStrength }
    | AddPasswordCriteria crit =>
      let updatedCriteria = List.append(m.criteria, [crit]) in
      let updatedStrength = calculateStrength(m.password, updatedCriteria) in
      { m with criteria = updatedCriteria, strength = updatedStrength }
    | RemovePasswordCriteria crit =>
      let updatedCriteria = List.filter((!=) crit, m.criteria) in
      let updatedStrength = calculateStrength(m.password, updatedCriteria) in
      { m with criteria = updatedCriteria, strength = updatedStrength }
    | AddTransformation trans =>
      let updatedTransformations = List.append(m.transformations, [trans]) in
      let updatedStrength = calculateStrength(String.transform(m.password, updatedTransformations), m.criteria) in
      { m with transformations = updatedTransformations, strength = updatedStrength }
    | RemoveTransformation trans =>
      let updatedTransformations = List.filter((!=) trans, m.transformations) in
      let updatedStrength = calculateStrength(String.transform(m.password, updatedTransformations), m.criteria) in
      { m with transformations = updatedTransformations, strength = updatedStrength }