# SNIPPET 1 #
, ts2) in

let Model.init: Model = ("", []) in

type Action =
  + AddTodo
  + RemoveTodo(Int)
  + ToggleTodo(Int)
  + UpdateBuffer(String) in

let eq 

# SNIPPET 2 #
 a todo list #
type Model = (String, [Todo]) in

type Update = (Model, Action) -> Model in

let Todo.eq: (Todo, Todo) -> Bool =
  fun (d1, s1), (d2, s

# SNIPPET 3 #
       buffer,
        add_button,
        todos_deck(todos)]) in
        
Render("todo_app", Model.init, view, update)


# Playlist MVU PRELUDE #

# 

# SNIPPET 4 #
"Add Todo")]) in

let buffer: Node =
  Div([],
      [TextInput([OnInput(UpdateBuffer)], [])]) in
    
let view: Model -> Node =
  fun input: String, 

# SNIPPET 5 #
", Var("bro")))) end


# TODO MVU PRELUDE #

# A todo has a description and a status #
type Todo = (String, Bool) in

# A description input buffer and

# SNIPPET 6 #
= Model.eq in
let num_todos = fun m:Model -> List.length(snd(m)) in

let add: Model -> [Todo] =
  fun (description, todos) ->
    if description $== "

