sketch:

# Update Playlist app model based on an action #

let update: (PlayList, PlayListAction) -> PlayList =
  ??
in

expected_ty:

# The expected type of the hole ?? is: a type consistent with ((PlayList, PlayListAction) -> PlayList) #
# The following type definitions are likely relevant: #
type PlayListState = (Playing(Id) + PausedOn(Id) + NoSongSelected) in
type Id = Int in
type PlayList = ([Id], PlayListState) in
type PlayListAction = (PlaySong(Id) + PauseCurrentSong + RemoveSong(Id) + AddSong(Id)) in

relevant_ctx:

# Consider using these variables relevant to the expected type: #
let get_songs: (PlayList -> [Id]) =  in
let get_state: (PlayList -> PlayListState) =  in
let List.sort: ((((?, ?) -> Int), [?]) -> [?]) =  in
let List.merge: ((((?, ?) -> Int), [?], [?]) -> [?]) =  in
let List.rev_append: (([?], [?]) -> [?]) =  in
let List.combine: (([?], [?]) -> [?]) =  in
let List.concat_map: (((? -> [?]), [?]) -> [?]) =  in
let List.filter_map: (((? -> Option), [?]) -> [?]) =  in
