# SNIPPET 1 #
, ts2) in

let Model.init: Model = ("", []) in

type Action =
  + AddTodo
  + RemoveTodo(Int)
  + ToggleTodo(Int)
  + UpdateBuffer(String) in

let eq 

# SNIPPET 2 #
Non-negative ID for songs #
type Id = Int in

# Actions user can do in a playlist #
type PlayListAction =
  + PlaySong(Id)
  + PauseCurrentSong
  + Re

# SNIPPET 3 #
moveSong(Id)
  # Add to the front of the playList, ignore duplication #
  + AddSong(Id)
in

# The state of the playlist #
type PlayListState =
  + Pla

# SNIPPET 4 #
 a todo list #
type Model = (String, [Todo]) in

type Update = (Model, Action) -> Model in

let Todo.eq: (Todo, Todo) -> Bool =
  fun (d1, s1), (d2, s

# SNIPPET 5 #
ying(Id)
  + PausedOn(Id)
  + NoSongSelected
in

# A playlist with a list of songs and the current state of the playlist #
type PlayList = ([Id], Play

# SNIPPET 6 #
       buffer,
        add_button,
        todos_deck(todos)]) in
        
Render("todo_app", Model.init, view, update)


# Playlist MVU PRELUDE #

# 

