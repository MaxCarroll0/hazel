sketch:

# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  ??
in

expected_ty:

# The expected type of the hole ?? is: a type consistent with ((Model, Action) -> Model) #
# The following type definitions are likely relevant: #
type PasswordCriteria = (RequireUppercase + RequireLowercase + MinimumLength(Int) + RequireNumber + RequireSpecialChar) in
type PasswordStrength = (Weak + Moderate + Strong) in
type Criteria = [PasswordCriteria] in
type Password = String in
type Strength = PasswordStrength in
type Action = (UpdatePassword(String) + ClearCriteria + AddCriterion(PasswordCriteria) + RemoveCriterion(PasswordCriteria)) in
type Model = (Password, Criteria, Strength) in

relevant_ctx:

# Consider using these variables relevant to the expected type: #
let initialModel: Model =  in
let calculateStrength: ((Password, [PasswordCriteria]) -> PasswordStrength) =  in
let strength_of: (Int -> PasswordStrength) =  in
let string_sub: ((String, Int, Int) -> String) =  in
let string_concat: ((String, [String]) -> String) =  in
let string_trim: (String -> String) =  in
let string_of_bool: (Bool -> String) =  in
let string_of_float: (Float -> String) =  in,
