sketch:

# Update the Room Booking app model based on an action #

let update: (Model, Action) -> Model =
  ??
in

expected_ty:

# The expected type of the hole ?? is: a type consistent with ((Model, Action) -> Model) #
# The following type definitions are likely relevant: #
type TimeOfDay = (AM + PM) in
type Weekday = (M + T + W + R + F) in
type Time = (Weekday, TimeOfDay) in
type User = String in
type Booking = (Time, User, BookingID) in
type BookingFormData = (Time, User) in
type BookingID = Int in
type Action = (AddBooking((User, Weekday, TimeOfDay)) + CancelBooking((User, Int)) + ClearBookings) in
type Model = (BookingFormData, [Booking], BookingID) in

relevant_ctx:

# Consider using these variables relevant to the expected type: #
let Model.init: Model =  in
let initFormState: ((Weekday, TimeOfDay), String) =  in
let rm_booking: ((User, BookingID, [Booking]) -> [Booking]) =  in
let getUserBookings: ((Model, User) -> [Booking]) =  in
let getBookings: (Model -> [Booking]) =  in
let List.length: ([?] -> Int) =  in
let string_compare: ((String, String) -> Int) =  in
let string_length: (String -> Int) =  in
