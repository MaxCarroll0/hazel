fun model, action ->
  case action
    | SelectEmoji(emoji) =>
      let (grid, _, palette) = model in
      (grid, emoji, palette)
    | StampEmoji((row, col)) =>
      let (grid, emoji, palette) = model in
      let newGrid = updateCell(row, col, emoji, grid) in
      (newGrid, emoji, palette)
    | ClearCell((row, col)) =>
      let (grid, emoji, palette) = model in
      let newGrid = updateCell(row, col, "", grid) in
      (newGrid, emoji, palette)
    | ClearGrid =>
      let (_, emoji, palette) = model in
      (initGrid(), emoji, palette)
    | FillRow(row) =>
      let (grid, emoji, palette) = model in
      let newGrid = fillRow(row, emoji, grid) in
      (newGrid, emoji, palette)
  end
where
  updateCell = fun row, col, emoji, grid ->
    List.mapi(fun i, row -> if i == row then List.mapi(fun j, _ -> if j == col then emoji else cell, row) else row, grid),
  fillRow = fun row, emoji, grid -> List.mapi(fun i, row -> if i == row then List.map(fun _ -> emoji, row) else row, grid)
in
update(defaultModel, FillRow(1))