# Update Playlist app model based on an action #

let update: (PlayList, PlayListAction) -> PlayList =
  fun model, action ->
case action
| PlaySong(id) => (get_songs(model), Playing(id))
| PauseCurrentSong => (get_songs(model), case get_state(model) of Playing(id) => PausedOn(id) | _ => get_state(model) end)
| RemoveSong(id) => (List.filter_map(fun song_id -> if song_id == id then None else Some(song_id), get_songs(model)), get_state(model))
| AddSong(id) => (List.concat_map(fun song_id -> [song_id; id], get_songs(model)), get_state(model))
end

in