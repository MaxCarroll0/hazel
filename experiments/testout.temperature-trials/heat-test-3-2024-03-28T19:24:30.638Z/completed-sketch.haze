# Update Playlist app model based on an action #

let update: (PlayList, PlayListAction) -> PlayList =
  fun playlist, action ->
  case action
  | PlaySong(id) => 
      let songs = get_songs(playlist) in
      if List.mem(id, songs) then (songs, Playing(id))
      else playlist
  | PauseCurrentSong => 
      let (songs, state) = playlist in
      case state
      | Playing(id) => (songs, PausedOn(id))
      | _ => playlist
  | RemoveSong(id) =>
      let (songs, state) = playlist in
      let new_songs = List.filter(fun song_id -> song_id != id, songs) in
      let new_state = 
        case state
        | Playing(song_id) => if song_id == id then NoSongSelected else state
        | PausedOn(song_id) => if song_id == id then NoSongSelected else state
        | _ => state
      in (new_songs, new_state)
  | AddSong(id) => 
      let (songs, state) = playlist in
      (id::songs, state)
  end
in