let update: (Model, Action) -> Model =
  fun model, action ->
  case action
  | AddBooking(user, weekday, timeOfDay) =>
    let newId = List.length(getBookings(model)) + 1 in
    let newBooking = (weekday, timeOfDay), user, newId in
    let formData, bookings, _ = model in
    formData, bookings @ [newBooking], newId
  | CancelBooking(user, bookingId) =>
    let formData, bookings, lastId = model in
    let updatedBookings = List.filter(fun (_time, bookingUser, id) -> string_compare(user, bookingUser) != 0 \/ id != bookingId, bookings) in
    formData, updatedBookings, lastId
  | ClearBookings =>
    let formData, _bookings, lastId = model in
    formData, [], lastId
  | ClearRange((rangeStartDay, rangeStartTime), (rangeEndDay, rangeEndTime)) =>
    let formData, bookings, lastId = model in
    let updatedBookings = List.filter((fun ((day, time), _user, _id) -> 
        weekdayIndex(day) < weekdayIndex(rangeStartDay) \/ weekdayIndex(day) > weekdayIndex(rangeEndDay), bookings)) in
    formData, updatedBookings, lastId
  end
in
