# Update Password Strength Checker app model based on an action #

let update: (Model, Action) -> Model =
  fun (model, action) ->
  case model, action
  | (password, criteria, strength), UpdatePassword(new_password) => (new_password, criteria, check_strength(new_password, criteria))
  | (password, criteria, strength), ClearCriteria => (password, [], Weak)
  | (password, criteria, strength), AddCriterion(criterion) => (password, criterion::criteria, check_strength(password, criterion::criteria))
  | (password, criteria, strength), RemoveCriterion(criterion) => (password, List.remove(criterion, criteria), check_strength(password, List.remove(criterion, criteria)))
  end
  where check_strength: (Password, Criteria) -> Strength = fun password, criteria ->
    if List.all(fun criterion -> meets_criterion(password, criterion), criteria)
    then Strong
    else if List.any(fun criterion -> meets_criterion(password, criterion), criteria)
    then Moderate
    else Weak
    where meets_criterion: (Password, PasswordCriteria) -> Bool = fun password, criterion ->
      case criterion
      | RequireUppercase => String.contains_uppercase(password)
      | RequireLowercase => String.contains_lowercase(password)
      | MinimumLength(length) => String.length(password) >= length
      | RequireNumber => String.contains_number(password)
      | RequireSpecialChar => String.contains_special_char(password)
      end
    end
  end
in