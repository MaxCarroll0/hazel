fun model, action ->
  case action
  | NoOp => model
  | SetDay(day) => let (time, room) = model.formState in {model with formState = ((day, time), room)}
  | SetTime(time) => let (day, room) = model.formState in {model with formState = ((day, time), room)}
  | SetRoom(room) => let (dayTime, _) = model.formState in {model with formState = (dayTime, room)}
  | BookRoom(user) =>
      let bookings = rm_booking(user, model.bookingID, getBookings(model)) in
      {model with bookings = bookings, formState = initFormState}
  | CancelBooking(user, bookingID) =>
      let bookings = getUserBookings(model, user) in
      let updatedBookings = List.filter(fun b -> b.id != bookingID, bookings) in
      {model with bookings = updatedBookings}
  end