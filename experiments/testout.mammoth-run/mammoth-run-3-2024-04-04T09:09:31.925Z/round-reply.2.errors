The following static errors were discovered:
Error in term:
  drop
Nature of error: Variable drop is not bound
Error in term:
  splitAt
Nature of error: Variable splitAt is not bound
Error in term:
  and drop fun ((n, xs)) ->
 case xs
 | [] => 
| h :: t => if n == 0 then xs else drop(n - 1, t)
end
Nature of error: Incomplete syntax (possible cause: remember that function application is c-style and requires parentheses around the argument)
Error in term:
  drop
Nature of error: Variable drop is not bound
Error in term:
  take
Nature of error: Variable take is not bound
Error in term:
  model.3
Nature of error: "model.3" isn't a valid token
Error in term:
  take fun ((n, xs)) ->
 case xs
 | [] => 
| h :: t => if n == 0 then  else h :: take(n - 1, t)
end
Nature of error: Incomplete syntax (possible cause: remember that function application is c-style and requires parentheses around the argument)
Error in term:
  model.2
Nature of error: "model.2" isn't a valid token
Error in term:
  take fun ((n, xs)) ->
 case xs
 | [] => 
| h :: t => if n == 0 then  else h :: take(n - 1, t)
end and drop fun ((n, xs)) ->
 case xs
 | [] => 
| h :: t => if n == 0 then xs else drop(n - 1, t)
end
Nature of error: Incomplete syntax (possible cause: remember that function application is c-style and requires parentheses around the argument)
Error in term:
  model.1
Nature of error: "model.1" isn't a valid token
Error in term:
  model.3
Nature of error: "model.3" isn't a valid token
Error in term:
  update_grid fun ((grid, row, col, new_val)) ->
 let ((old_row, rest)) = splitAt(row, grid) in
 let ((old_val, rest_row)) = splitAt(col, old_row) in
 old_val @ new_val @ rest_row :: rest
Nature of error: Incomplete syntax (possible cause: remember that function application is c-style and requires parentheses around the argument)
Error in term:
  and
Nature of error: Variable and is not bound
Error in term:
  model.2
Nature of error: "model.2" isn't a valid token
Error in term:
  update_grid
Nature of error: Variable update_grid is not bound
Error in term:
  and
Nature of error: Variable and is not bound
Error in term:
  splitAt
Nature of error: Variable splitAt is not bound
Error in term:
  model.2
Nature of error: "model.2" isn't a valid token
Error in term:
  update_grid
Nature of error: Variable update_grid is not bound
Error in term:
  and
Nature of error: Variable and is not bound
Error in term:
  model.2
Nature of error: "model.2" isn't a valid token
Error in term:
  model.3
Nature of error: "model.3" isn't a valid token
Error in term:
  splitAt fun ((idx, xs)) ->
 (take(idx, xs), drop(idx, xs)) and take fun ((n, xs)) ->
 case xs
 | [] => 
| h :: t => if n == 0 then  else h :: take(n - 1, t)
end and drop fun ((n, xs)) ->
 case xs
 | [] => 
| h :: t => if n == 0 then xs else drop(n - 1, t)
end
Nature of error: Incomplete syntax (possible cause: remember that function application is c-style and requires parentheses around the argument)
Error in term:
  fun ((model, action)) ->
 case action
 | SelectEmoji(emoji) => (model.1, emoji, model.3)
| StampEmoji(((row, col))) => (update_grid(model.1, row, col, model.2), model.2, model.3)
| ClearCell(((row, col))) => (update_grid(model.1, row, col, ), model.2, model.3)
| ClearGrid => (, model.2, model.3)
| FillRow(row) => (fill_row(model.1, row, model.2), model.2, model.3)
end where update_grid fun ((grid, row, col, new_val)) ->
 let ((old_row, rest)) = splitAt(row, grid) in
 let ((old_val, rest_row)) = splitAt(col, old_row) in
 old_val @ new_val @ rest_row :: rest and fill_row fun ((grid, row, new_val)) ->
 let ((old_row, rest)) = splitAt(row, grid) in
 old_row @ List.map(fun _ ->
 new_val, old_row) @ rest and splitAt fun ((idx, xs)) ->
 (take(idx, xs), drop(idx, xs)) and take fun ((n, xs)) ->
 case xs
 | [] => 
| h :: t => if n == 0 then  else h :: take(n - 1, t)
end and drop fun ((n, xs)) ->
 case xs
 | [] => 
| h :: t => if n == 0 then xs else drop(n - 1, t)
end
Nature of error: Incomplete syntax (possible cause: remember that function application is c-style and requires parentheses around the argument)
Error in term:
  and fill_row fun ((grid, row, new_val)) ->
 let ((old_row, rest)) = splitAt(row, grid) in
 old_row @ List.map(fun _ ->
 new_val, old_row) @ rest and splitAt fun ((idx, xs)) ->
 (take(idx, xs), drop(idx, xs)) and take fun ((n, xs)) ->
 case xs
 | [] => 
| h :: t => if n == 0 then  else h :: take(n - 1, t)
end and drop fun ((n, xs)) ->
 case xs
 | [] => 
| h :: t => if n == 0 then xs else drop(n - 1, t)
end
Nature of error: Incomplete syntax (possible cause: remember that function application is c-style and requires parentheses around the argument)
Error in term:
  where update_grid fun ((grid, row, col, new_val)) ->
 let ((old_row, rest)) = splitAt(row, grid) in
 let ((old_val, rest_row)) = splitAt(col, old_row) in
 old_val @ new_val @ rest_row :: rest and fill_row fun ((grid, row, new_val)) ->
 let ((old_row, rest)) = splitAt(row, grid) in
 old_row @ List.map(fun _ ->
 new_val, old_row) @ rest and splitAt fun ((idx, xs)) ->
 (take(idx, xs), drop(idx, xs)) and take fun ((n, xs)) ->
 case xs
 | [] => 
| h :: t => if n == 0 then  else h :: take(n - 1, t)
end and drop fun ((n, xs)) ->
 case xs
 | [] => 
| h :: t => if n == 0 then xs else drop(n - 1, t)
end
Nature of error: Incomplete syntax (possible cause: remember that function application is c-style and requires parentheses around the argument)
Error in term:
  fill_row
Nature of error: Variable fill_row is not bound
Error in term:
  splitAt
Nature of error: Variable splitAt is not bound
Error in term:
  model.1
Nature of error: "model.1" isn't a valid token
Error in term:
  where
Nature of error: Variable where is not bound
Error in term:
  and take fun ((n, xs)) ->
 case xs
 | [] => 
| h :: t => if n == 0 then  else h :: take(n - 1, t)
end and drop fun ((n, xs)) ->
 case xs
 | [] => 
| h :: t => if n == 0 then xs else drop(n - 1, t)
end
Nature of error: Incomplete syntax (possible cause: remember that function application is c-style and requires parentheses around the argument)
Error in term:
  drop
Nature of error: Variable drop is not bound
Error in term:
  and splitAt fun ((idx, xs)) ->
 (take(idx, xs), drop(idx, xs)) and take fun ((n, xs)) ->
 case xs
 | [] => 
| h :: t => if n == 0 then  else h :: take(n - 1, t)
end and drop fun ((n, xs)) ->
 case xs
 | [] => 
| h :: t => if n == 0 then xs else drop(n - 1, t)
end
Nature of error: Incomplete syntax (possible cause: remember that function application is c-style and requires parentheses around the argument)
Error in term:
  model.3
Nature of error: "model.3" isn't a valid token
Error in term:
  take
Nature of error: Variable take is not bound
Error in term:
  fill_row fun ((grid, row, new_val)) ->
 let ((old_row, rest)) = splitAt(row, grid) in
 old_row @ List.map(fun _ ->
 new_val, old_row) @ rest and splitAt fun ((idx, xs)) ->
 (take(idx, xs), drop(idx, xs)) and take fun ((n, xs)) ->
 case xs
 | [] => 
| h :: t => if n == 0 then  else h :: take(n - 1, t)
end and drop fun ((n, xs)) ->
 case xs
 | [] => 
| h :: t => if n == 0 then xs else drop(n - 1, t)
end
Nature of error: Incomplete syntax (possible cause: remember that function application is c-style and requires parentheses around the argument)
Error in term:
  model.1
Nature of error: "model.1" isn't a valid token
Error in term:
  fill_row fun ((grid, row, new_val)) ->
 let ((old_row, rest)) = splitAt(row, grid) in
 old_row @ List.map(fun _ ->
 new_val, old_row) @ rest
Nature of error: Incomplete syntax (possible cause: remember that function application is c-style and requires parentheses around the argument)
Error in term:
  splitAt fun ((idx, xs)) ->
 (take(idx, xs), drop(idx, xs))
Nature of error: Incomplete syntax (possible cause: remember that function application is c-style and requires parentheses around the argument)
Error in term:
  and
Nature of error: Variable and is not bound
Error in term:
  splitAt
Nature of error: Variable splitAt is not bound
Error in term:
  fill_row
Nature of error: Variable fill_row is not bound
Error in term:
  take
Nature of error: Variable take is not bound
Error in term:
  model.2
Nature of error: "model.2" isn't a valid token
Error in term:
  drop fun ((n, xs)) ->
 case xs
 | [] => 
| h :: t => if n == 0 then xs else drop(n - 1, t)
end
Nature of error: Incomplete syntax (possible cause: remember that function application is c-style and requires parentheses around the argument)
Error in term:
  model.2
Nature of error: "model.2" isn't a valid token
Error in term:
  update_grid fun ((grid, row, col, new_val)) ->
 let ((old_row, rest)) = splitAt(row, grid) in
 let ((old_val, rest_row)) = splitAt(col, old_row) in
 old_val @ new_val @ rest_row :: rest and fill_row fun ((grid, row, new_val)) ->
 let ((old_row, rest)) = splitAt(row, grid) in
 old_row @ List.map(fun _ ->
 new_val, old_row) @ rest and splitAt fun ((idx, xs)) ->
 (take(idx, xs), drop(idx, xs)) and take fun ((n, xs)) ->
 case xs
 | [] => 
| h :: t => if n == 0 then  else h :: take(n - 1, t)
end and drop fun ((n, xs)) ->
 case xs
 | [] => 
| h :: t => if n == 0 then xs else drop(n - 1, t)
end
Nature of error: Incomplete syntax (possible cause: remember that function application is c-style and requires parentheses around the argument)
Error in term:
  update_grid
Nature of error: Variable update_grid is not bound
Error in term:
  model.1
Nature of error: "model.1" isn't a valid token
Error in term:
  model.3
Nature of error: "model.3" isn't a valid token
Please try to address the error(s) by updating your previous code suggestion
Please respond ONLY with the update suggestion