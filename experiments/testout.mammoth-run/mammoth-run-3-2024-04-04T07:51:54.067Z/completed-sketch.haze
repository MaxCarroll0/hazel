# Update Playlist app model based on an action #

let update: (PlayList, PlayListAction) -> PlayList =
  fun (playlist, action) ->
  case action
  | PlaySong(id) =>
      let newState = Playing(id) in
      let (songs, _) = playlist in
      (songs, newState)
  | PauseCurrentSong =>
      let newState = case snd(playlist) of
        | Playing(id) => PausedOn(id)
        | _ => snd(playlist)
      end in
      let (songs, _) = playlist in
      (songs, newState)
  | RemoveSong(id) =>
      let newSongs = List.filter(fun songId -> songId != id, fst(playlist)) in
      let (_, state) = playlist in
      (newSongs, state)
  | AddSong(id) =>
      let newSongs = id :: fst(playlist) in
      let (_, state) = playlist in
      (newSongs, state)
  end
in