fun model, action ->
  case action
  | UpdatePassword(new_password) => 
      let (old_password, criteria, old_strength) = model in
      let new_strength = calculateStrength(new_password, criteria) in
      (new_password, criteria, new_strength)
  | ClearCriteria => 
      let (password, old_criteria, old_strength) = model in
      let new_strength = calculateStrength(password, []) in
      (password, [], new_strength)
  | AddCriterion(new_criterion) => 
      let (password, old_criteria, old_strength) = model in
      let new_criteria = new_criterion :: old_criteria in
      let new_strength = calculateStrength(password, new_criteria) in
      (password, new_criteria, new_strength)
  | RemoveCriterion(criterion_to_remove) => 
      let (password, old_criteria, old_strength) = model in
      let new_criteria = List.filter(old_criteria, fun c -> c != criterion_to_remove) in
      let new_strength = calculateStrength(password, new_criteria) in
      (password, new_criteria, new_strength)
  end