The following static errors were discovered:
Error in term:
  Playing
Nature of error: Expecting type PlayListState but got inconsistent type (Id -> PlayListState)
Error in term:
  case action
 | AddSong(id) => List.sort(fun (a, b) ->
 a < b, id :: get_songs(model))
| RemoveSong(id) => List.filter_map(fun song ->
 if song == id then None else Some(song), get_songs(model))
| TogglePlay => if (get_state(model) == Playing) then Paused else Playing
| Shuffle => List.shuffle(get_songs(model))
end
Nature of error: Expecting branches to have consistent types but got types: [?], [?], (Id -> PlayListState), ?
Error in term:
  Paused
Nature of error: Constructor is not defined
Error in term:
  List.shuffle
Nature of error: Variable List.shuffle is not bound
Error in term:
  a < b
Nature of error: Expecting type Int but got inconsistent type Bool
Error in term:
  Shuffle
Nature of error: Constructor is not defined
Error in term:
  TogglePlay
Nature of error: Constructor is not defined
Please try to address the error(s) by updating your previous code suggestion
Please respond ONLY with the update suggestion