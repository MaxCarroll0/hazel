fun model, action -> 
  case action
  | CreateRoom(name) => 
    let newRoom = { id = model.nextId; name = name } in
    { model with rooms = model.rooms @ [newRoom]; nextId = model.nextId + 1 }
  | DeleteRoom(id) =>
    let rooms = List.filter((fun r -> r.id != id), model.rooms) in
    { model with rooms = rooms }
  | BookRoom(id, user) =>
    let rooms = List.map((fun r -> if r.id == id then { r with bookings = r.bookings @ [user] } else r), model.rooms) in
    { model with rooms = rooms }
  | CancelBooking(id, user) ->
    let rooms = List.map((fun r -> if r.id == id then { r with bookings = List.filter((fun u -> u != user), r.bookings) } else r), model.rooms) in
    { model with rooms = rooms }