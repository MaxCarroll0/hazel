let List.length: [(String, Bool)]-> Int =
  fun xs ->
    case xs
    | [] => 0
    | _::xs => 1 + List.length(xs)
    end in

let List.mapi: ((Int, Bool) -> Bool, [Bool]) -> [Bool]=
  fun f, xs ->
    let go: (Int, [Bool])-> [Bool] = fun idx, xs ->
      case xs
      | [] => []
      | hd::tl => f(idx, hd)::go(idx + 1, tl)
      end in
    go(0, xs) in

type Container =
  + Pod(Bool)
  + CapsuleCluster(Int, Int) in
let total_capacity: Container -> Int =
  fun c ->
    case c
    | Pod(b) => if !b && true then 1 else 0
    | CapsuleCluster(x, y) => x * y
    end in

let f: Int -> Int = fun x:Int -> f(5) in   

let triple = (4, 8, true) in
let (_, y, condition) = triple in
let get: Option -> Int =
fun maybe_num ->
  case maybe_num
  | Some(x) => x
  | None => if !condition then 0 else y + 1
  end in

let num_or_zero =
  fun maybe_num ->
    case maybe_num
    | Some(num) => num
    | None => 0 end in
    
let merge_sort: [Int]->[Int] =
  fun list ->
    let split: [Int]->([Int],[Int]) =
      fun xs -> ([], []) in
    let merge: ([Int],[Int])->[Int]=
      fun left, right -> [] in
    let merge_sort_helper: [Int]->[Int]=
      fun l -> []in
    merge_sort_helper(list)
in


type MenuItem =
  + Breakfast(Int, Int)
  + Lunch(Float) in
let per_lunch_unit = 0.95 in
let price: MenuItem  -> Float =
  fun m ->
    case m
    | Breakfast(x, y) => 1.20
    | Lunch(f) => f *. per_lunch_unit
    end
in price(Breakfast(1,2))/.3.

let List.merge: ((?, ?)->Bool,[?], [?]) -> [?] =
  fun cmp, left, right ->
    case left, right
    | [], _ => right
    | _, [] => left
    | h1::t1, h2::t2 =>
      if cmp(h1, h2)
      then h1 :: List.merge(cmp, t1, right)
      else h2 :: List.merge(cmp,left, t2)
    end in

let List.sort: ((?, ?) -> Bool, [?]) -> [?] =
  fun cmp, list ->
    let merge_sort_helper: [?] -> [?] =
      fun l ->
        case l
        | [] => ?
        | [x] => [x]
        | _ =>
          let mid = List.length(l) / 2 in
          let left, right = List.take(mid, l), List.drop(mid, l) in
          List.merge(cmp, merge_sort_helper(left), merge_sort_helper(right))
        end
    in merge_sort_helper(list) in
