open Derivation.Rule;
let rules_ALFA = [
  A_InjL,
  A_InjR,
  E_InjL,
  E_InjR,
  A_Case,
  S_Case,
  E_Case_L,
  E_Case_R,
  E_Fix,
  T_Roll,
  T_Unroll,
  E_Roll,
  E_Unroll,
];

let rules_BD = [
  S_Num,
  S_True,
  S_False,
  A_Subsumption,
  S_Var,
  A_Fun,
  S_FunAnn,
  A_FunAnn,
  S_Ap,
  S_Neg,
  S_Plus,
  S_Minus,
  S_Times,
  S_Lt,
  S_Gt,
  S_Eq,
  S_LetAnn,
  A_LetAnn,
  S_Let,
  A_Let,
  S_Pair,
  A_Pair,
  S_LetPair,
  A_LetPair,
  S_PrjL,
  S_PrjR,
  S_Triv,
];

let rules_ALFp = [
  T_Var,
  T_Let,
  T_LetAnn,
  T_Num,
  T_True,
  T_False,
  T_Neg,
  T_Plus,
  T_Minus,
  T_Times,
  T_Lt,
  T_Gt,
  T_Eq,
  T_If,
  T_Fun,
  T_FunAnn,
  T_Ap,
  E_Pair,
  V_Pair,
  T_Pair,
  E_PrjL,
  E_PrjR,
  T_PrjL,
  T_PrjR,
  E_LetPair,
  T_LetPair,
  V_Triv,
  T_Triv,
];

let rules_ALF = [
  V_Num,
  V_True,
  V_False,
  V_Fun,
  E_Val,
  E_Lt_T,
  E_Lt_F,
  E_Gt_T,
  E_Gt_F,
  E_Eq_T,
  E_Eq_F,
  E_If_T,
  E_If_F,
  E_Let,
  E_Ap,
];

let rules_AL = [
  // V_NumLit,
  // E_NumLit,
  E_Neg,
  E_Plus,
  E_Minus,
  E_Times,
];

let rules_Logic = [
  Assumption,
  And_I,
  And_E_L,
  And_E_R,
  Or_I_L,
  Or_I_R,
  Or_E,
  Implies_I,
  Implies_E,
  Truth_I,
  Falsity_E,
];

let rules_all =
  rules_ALFA @ rules_BD @ rules_ALFp @ rules_ALF @ rules_AL @ rules_Logic;

let rules_ALFA_all = rules_ALFA @ rules_BD @ rules_ALFp @ rules_ALF @ rules_AL;

let rules_syn = [
  S_Num,
  S_True,
  S_False,
  S_Var,
  S_FunAnn,
  S_Ap,
  S_Neg,
  S_Plus,
  S_Minus,
  S_Times,
  S_Lt,
  S_Gt,
  S_Eq,
  S_LetAnn,
  S_Let,
  S_Pair,
  S_LetPair,
  S_PrjL,
  S_PrjR,
  S_Triv,
];

let rules_ana = [
  A_Subsumption,
  A_Fun,
  A_FunAnn,
  A_LetAnn,
  A_Let,
  A_Pair,
  A_LetPair,
];

let rules_typ = [
  T_Var,
  T_Let,
  T_LetAnn,
  T_Num,
  T_True,
  T_False,
  T_Neg,
  T_Plus,
  T_Minus,
  T_Times,
  T_Lt,
  T_Gt,
  T_Eq,
  T_If,
  T_Fun,
  T_FunAnn,
  T_Ap,
  T_Pair,
  T_PrjL,
  T_PrjR,
  T_LetPair,
  T_Triv,
];

let rules_eval = [
  V_Num,
  V_True,
  V_False,
  V_Fun,
  E_Val,
  E_Lt_T,
  E_Lt_F,
  E_Gt_T,
  E_Gt_F,
  E_Eq_T,
  E_Eq_F,
  E_If_T,
  E_If_F,
  E_Let,
  E_Ap,
  E_Neg,
  E_Plus,
  E_Minus,
  E_Times,
  E_Pair,
  V_Pair,
  E_PrjL,
  E_PrjR,
  E_LetPair,
  V_Triv,
];
