open Virtual_dom.Vdom;
open Node;

let logo_panel =
  a(
    [Attr.classes(["logo-text"]), Attr.href("https://hazel.org")],
    [text("Hazel")],
  );

let branch_panel =
  span(
    [Attr.classes(["branch-panel"])],
    [
      text("["),
      text(Version_autogenerated.branch),
      text(" @ "),
      text(Version_autogenerated.commit_hash_short),
      text(" ("),
      text(Version_autogenerated.commit_time),
      text(")]"),
    ],
  );

let top_bar = (~inject: ModelAction.t => Ui_event.t, ~model: Model.t) => {
  div(
    [Attr.classes(["top-bar"])],
    [
      logo_panel,
      CardsPanel.view(~inject, ~model),
      ActionMenu.view(~inject, model.settings),
    ],
  );
};

let cell_status_panel = (~settings: Settings.t, ~model: Model.t, ~inject) => {
  let program = Model.get_program(model);
  let selected_instance = Model.get_selected_hole_instance(model);
  let (_, ty, _) = program.edit_state;
  let result =
    settings.evaluation.show_unevaluated_elaboration
      ? program |> Program.get_elaboration
      : program |> Program.get_result |> ProgramResult.get_dhexp;
  div(
    [],
    [
      div(
        [Attr.classes(["cell-status"])],
        [
          div(
            [Attr.classes(["type-indicator"])],
            [
              div(
                [Attr.classes(["type-label"])],
                [text("Result of type: ")],
              ),
              div([Attr.classes(["htype-view"])], [HTypCode.view(ty)]),
            ],
          ),
        ],
      ),
      div(
        [Attr.classes(["result-view"])],
        [
          DHCode.view(
            ~inject,
            ~selected_instance,
            ~settings=settings.evaluation,
            ~width=80,
            ~font_metrics=model.font_metrics,
            result,
          ),
        ],
      ),
    ],
  );
};

let left_sidebar = (~inject: ModelAction.t => Event.t, ~model: Model.t) =>
  Sidebar.left(~inject, ~is_open=model.left_sidebar_open, () =>
    [
      UndoHistoryPanel.view(
        ~inject,
        ~active=Model.is_structure_editor_active(model),
        model,
      ),
      ActionPanel.view(~inject, model),
    ]
  );

let right_sidebar = (~inject: ModelAction.t => Event.t, ~model: Model.t) => {
  let settings = model.settings;
  let program = Model.get_program(model);
  let selected_instance = Model.get_selected_hole_instance(model);
  Sidebar.right(~inject, ~is_open=model.right_sidebar_open, () =>
    [
      ContextInspector.view(
        ~inject,
        ~selected_instance,
        ~settings=settings.evaluation,
        ~font_metrics=model.font_metrics,
        ~active=Model.is_structure_editor_active(model),
        program,
      ),
    ]
  );
};

let text_editor_page = (~inject: ModelAction.t => Event.t, ~model: Model.t) => {
  TextEditor.view(~inject, ~model);
};

let structural_page = (~inject: ModelAction.t => Event.t, ~model: Model.t) => {
  let settings = model.settings;
  let card_caption = Model.get_card(model).info.caption;
  let cell_status =
    !settings.evaluation.evaluate
      ? div([], []) : cell_status_panel(~settings, ~model, ~inject);
  div(
    [Attr.id("page-area")],
    [
      div(
        [Attr.classes(["page"])],
        [
          Node.span(
            [Attr.id("button-span")],
            [
              Node.button(
                [
                  Attr.id("editor-switch-button"),
                  Attr.on_click(_ => {
                    inject(
                      ModelAction.UpdateTextEditor(
                        TextEditorModel.OpenEditor(Model.get_program(model)),
                      ),
                    )
                  }),
                ],
                [Node.text("Switch to Text Editor")],
              ),
            ],
          ),
          div([Attr.classes(["card-caption"])], [card_caption]),
          Cell.view(~inject, model),
          cell_status,
        ],
      ),
      div(
        [
          Attr.style(
            Css_gen.(white_space(`Pre) @> font_family(["monospace"])),
          ),
        ],
        [branch_panel],
      ),
    ],
  );
};

let view = (~inject: ModelAction.t => Event.t, model: Model.t) => {
  let settings = model.settings;
  let current_page =
    Model.is_structure_editor_active(model)
      ? structural_page : text_editor_page;
  TimeUtil.measure_time(
    "Page.view",
    settings.performance.measure && settings.performance.page_view,
    () => {
    div(
      [Attr.id("root")],
      [
        /* font-specimen used to gather font metrics for caret positioning and other things */
        /* Ensure any font styling for the editor is applied to this as well */
        Node.div([Attr.id("font-specimen")], [Node.text("X")]),
        top_bar(~inject, ~model),
        div(
          [Attr.classes(["main-area"])],
          [
            left_sidebar(~inject, ~model),
            div(
              [Attr.classes(["flex-wrapper"])],
              [current_page(~inject, ~model)],
            ),
            right_sidebar(~inject, ~model),
          ],
        ),
      ],
    )
  });
};
