import Ast from "./ast"
import AstUtil from "./ast_util"

export let mkBoolLit = (x : Bool) => {
    AstUtil.toHazel(Ast.BoolLit(x))
}

export let mkBinBoolOpAnd = (x, y) => {
    let x = AstUtil.toAst(x)
    let y = AstUtil.toAst(y)
    AstUtil.toHazel(Ast.BinBoolOp(Ast.And, x, y))
}

export let mkBinBoolOpOr = (x, y) => {
    let x = AstUtil.toAst(x)
    let y = AstUtil.toAst(y)
    AstUtil.toHazel(Ast.BinBoolOp(Ast.Or, x, y))
}

export let mkEmptyHole = (u : Ast.MetaVar, i : Ast.MetaVarInst, sigma : Ast.VarMap<Ast.Ast>) => {
    AstUtil.toHazel(Ast.EmptyHole(u, i, sigma))
}

export let convertBoolLit = (x : AstUtil.Hazel) => {
    if (AstUtil.isIndet(x)) {
        x
    } else if (AstUtil.isConst(x)) {
        mkBoolLit(AstUtil.toBool(x))
    } else {
        x // unreachable
    }
}
