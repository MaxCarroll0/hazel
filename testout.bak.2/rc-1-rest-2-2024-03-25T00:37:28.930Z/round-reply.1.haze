fun (playList, action) ->
  case action
  | PlaySong(id_to_play) => 
      let (ids, state) = playList in
      let updated_state = 
        case state
        | NoSongSelected => Playing(id_to_play)
        | _ => state
        end in
      (ids, updated_state)
  | PauseCurrentSong => 
      let (ids, state) = playList in
      let updated_state = 
        case state
        | Playing(current_id) => PausedOn(current_id)
        | _ => state
        end in
      (ids, updated_state)
  | RemoveSong(id_to_remove) => 
      let (ids, state) = playList in
      let updated_ids = Lists.filter(fun id -> id != id_to_remove, ids) in
      let updated_state = 
        case state
        | Playing(current_id) => if current_id == id_to_remove then NoSongSelected else state
        | PausedOn(current_id) => if current_id == id_to_remove then NoSongSelected else state
        | _ => state
        end in
      (updated_ids, updated_state)
  | AddSong(id_to_add) => 
      let (ids, state) = playList in
      (id_to_add::ids, state)
  end